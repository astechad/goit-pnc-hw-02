import math
import string # Імпортуємо string для використання в simple_permutation_decrypt, якщо код запускається окремо

# --- Функції simple_permutation_encrypt та simple_permutation_decrypt з Рівня 1 ---
# (Скопійовано для самостійного запуску Рівня 2)

def simple_permutation_encrypt(text, key):
    """
    Шифрує текст за допомогою простої перестановки.
    (Скопійовано з Рівня 1 для зручності)
    """
    cleaned_text = "".join(text.split()).upper()
    key = key.upper()
    key_length = len(key)

    key_indexed = sorted([(key[i], i) for i in range(key_length)])
    column_order = [item[1] for item in key_indexed]

    num_rows = math.ceil(len(cleaned_text) / key_length)
    padding_needed = (num_rows * key_length) - len(cleaned_text)
    padded_text = cleaned_text + 'X' * padding_needed

    matrix = []
    for i in range(num_rows):
        row = list(padded_text[i * key_length : (i + 1) * key_length])
        matrix.append(row)

    ciphertext = ""
    for col_index in column_order:
        for row in matrix:
            ciphertext += row[col_index]

    return ciphertext

def simple_permutation_decrypt(ciphertext, key):
    """
    Дешифрує текст, зашифрований простою перестановкою.
    (Скопійовано з Рівня 1 для зручності)
    """
    key = key.upper()
    key_length = len(key)
    ciphertext_length = len(ciphertext)

    key_indexed = sorted([(key[i], i) for i in range(key_length)])
    encryption_order = [item[1] for item in key_indexed]

    num_rows = ciphertext_length // key_length

    num_short_columns = (num_rows * key_length) - ciphertext_length
    column_lengths = [num_rows] * key_length

    sorted_original_indices = [item[1] for item in sorted([(key[i], i) for i in range(key_length)])]
    short_column_original_indices = sorted_original_indices[key_length - num_short_columns:]

    for original_index in short_column_original_indices:
         position_in_encryption_order = encryption_order.index(original_index)
         column_lengths[position_in_encryption_order] -= 1

    matrix = [['' for _ in range(key_length)] for _ in range(num_rows)]
    ciphertext_index = 0

    for i, col_index_in_encryption_order in enumerate(encryption_order):
         current_column_length = column_lengths[i]
         for row_index in range(current_column_length):
             matrix[row_index][col_index_in_encryption_order] = ciphertext[ciphertext_index]
             ciphertext_index += 1

    decrypted_text = ""
    for row in matrix:
        decrypted_text += "".join(row)

    decrypted_text = decrypted_text.rstrip('X')

    return decrypted_text

# --- Кінець функцій з Рівня 1 ---


def double_permutation_encrypt(text, key1, key2):
    """
    Шифрує текст за допомогою подвійної перестановки.

    :param text: Текст для шифрування.
    :param key1: Перший ключ (рядок).
    :param key2: Другий ключ (рядок).
    :return: Зашифрований текст.
    """
    # Перше шифрування
    first_encrypted = simple_permutation_encrypt(text, key1)
    # Друге шифрування застосовується до результату першого
    double_encrypted = simple_permutation_encrypt(first_encrypted, key2)
    return double_encrypted

def double_permutation_decrypt(ciphertext, key1, key2):
    """
    Дешифрує текст, зашифрований подвійною перестановкою.

    :param ciphertext: Зашифрований текст (результат подвійного шифрування).
    :param key1: Перший ключ (рядок).
    :param key2: Другий ключ (рядок).
    :return: Дешифрований текст.
    """
    # Перше дешифрування (використовуємо другий ключ)
    first_decrypted = simple_permutation_decrypt(ciphertext, key2)
    # Друге дешифрування (використовуємо перший ключ)
    double_decrypted = simple_permutation_decrypt(first_decrypted, key1)
    return double_decrypted

# Оригінальний текст (той самий, що й на Рівні 1)
original_text = """The artist is the
creator of beautiful things. To reveal art and conceal the artist is art's aim.
The critic is he who can translate into another manner or a new material his
impression of beautiful things. The highest, as the lowest, form of criticism is
a mode of autobiography. Those who find ugly meanings in beautiful things are
corrupt without being charming. This is a fault. Those who find beautiful
meanings in beautiful things are the cultivated. For these there is hope. They
are the elect to whom beautiful things mean only Beauty. There is no such thing
as a moral or an immoral book. Books are well written, or badly written. That
is all. The nineteenth-century dislike of realism is the rage of Caliban seeing
his own face in a glass. The nineteenth-century dislike of Romanticism is the
rage of Caliban not seeing his own face in a glass. The moral life of man forms
part of the subject matter of the artist, but the morality of art consists in
the perfect use of an imperfect medium. No artist desires to prove anything.
Even things that are true can be proved. No artist has ethical sympathies. An
ethical sympathy in an artist is an unpardonable mannerism of style. No artist
is ever morbid. The artist can express everything. Thought and language are to
the artist instruments of an art. Vice and virtue are to the artist materials
for an art. From the point of view of form, the type of all the arts is the art
of the musician. From the point of view of feeling, the actor's craft is the
type. All art is at once surface and symbol. Those who go beneath the surface
do so at their peril. Those who read the symbol do so at their peril. It is the
spectator, and not life, that art really mirrors. Diversity of opinion about a
work of art shows that the work is new, complex, vital. When critics disagree
the artist is in accord with himself. We can forgive a man for making a useful
thing as long as he does not admire it. The only excuse for making a useless
thing is that one admires it intensely. All art is quite useless."""

key1_level2 = "SECRET"
key2_level2 = "CRYPTO"

# --- Виконання Рівня 2 ---
print("\n--- Рівень 2: Шифр подвійної перестановки ---")

# Шифрування
double_encrypted_text = double_permutation_encrypt(original_text, key1_level2, key2_level2)
print("\nПодвійний зашифрований текст:")
print(double_encrypted_text)

# Дешифрування
double_decrypted_text = double_permutation_decrypt(double_encrypted_text, key1_level2, key2_level2)
print("\nПодвійний дешифрований текст:")
print(double_decrypted_text)

# Перевірка (порівнюємо чисту літерну частину)
cleaned_original = "".join(original_text.split()).upper()
print("\nПеревірка: Дешифрована літерна частина збігається з оригінальною?", cleaned_original == double_decrypted_text)
